// This file will be used for network, which will consist of layers.
// Struct NeuralNetwork and function Predict are generated by ChatGPT. Further functions are my own doing.
// I have also commented everything manually to understand the code and to make it understandable
package network

import (
	"encoding/json"
	"fmt"
)

// NeuralNetwork consists of layers of neurons. It has no adjustable parameters other than layers.
type NeuralNetwork struct {
	Layers []*Layer
}

// Creating a function for single forward pass.
// nn pointer to neural network that can read and modify layers
// Takes input slice as parameter, and returns output slice that is the output of network.
func (nn *NeuralNetwork) Predict(input []float64) []float64 {
	// Creating a slice output, that will keep the output values of last processed layer. Starting
	// with input, as it is what comes before first layer.
	output := input

	fmt.Print("inputs: ", input, "\n")

	// Loop through all the layers in the neural network updating outputs as we move through layers
	for _, layer := range nn.Layers {
		output = layer.Forward(output)
	}
	return output
}

// Function for printing structure of neural network for debugging and checking that everything works.
// Will be refined later to be more informative and visually nicer :)
func (nn *NeuralNetwork) PrintLayers() {
	fmt.Print("Amount of neurons in each layer in the neural network: \n")
	for layer := range nn.Layers {
		fmt.Print("layer ", layer, ": ", nn.Layers[layer].Length(), "\n")
	}
}

func (nn *NeuralNetwork) AdjustWeights(layer int, node int, newWeighNumber int, newWeightValue float64, newBias float64) {
	fmt.Print("Before setting weights: \n")
	nn.Layers[layer].Neurons[node].PrintNeuronsWeights()
	nn.Layers[layer].Neurons[node].SetWeight(newWeighNumber, newWeightValue, newBias)
	fmt.Print("After setting weights: \n")
	nn.Layers[layer].Neurons[node].PrintNeuronsWeights()
}

// Constructor for neural network
func NewNeuralNetwork(layers []*Layer) *NeuralNetwork {
	temp := &NeuralNetwork{
		Layers: layers,
	}
	return temp
}

func (nn *NeuralNetwork) Jsonify() []byte {
	b, err := json.MarshalIndent(nn, "", "  ")
	if err == nil {
		return b
	} else {
		fmt.Print("Error in jsonify - message from network.go")
		return nil
	}
}
